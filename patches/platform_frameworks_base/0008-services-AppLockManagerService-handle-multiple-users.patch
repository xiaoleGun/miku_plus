From 9c5e5eb5971d62c7aff72e344760ddf45db9baad Mon Sep 17 00:00:00 2001
From: Alfred Mathew <alfredmathew05@gmail.com>
Date: Tue, 22 Feb 2022 22:46:09 +0530
Subject: [PATCH 08/24] services: AppLockManagerService: handle multiple users
 properly

* currentUserId has to be fetched everytime to ensure configuration is read properly.
* also configuration for old user isn't removed when new user starts since a switch back can happen in the near future and we'll perform a disk read for nothing

Signed-off-by: Alfred Mathew <alfredmathew05@gmail.com>
Signed-off-by: spezi77 <spezi7713@gmx.net>
---
 .../server/app/AppLockManagerService.kt       | 37 ++++++++++++-------
 1 file changed, 24 insertions(+), 13 deletions(-)

diff --git a/services/core/java/com/android/server/app/AppLockManagerService.kt b/services/core/java/com/android/server/app/AppLockManagerService.kt
index a6b32471f23b..596d78aca052 100644
--- a/services/core/java/com/android/server/app/AppLockManagerService.kt
+++ b/services/core/java/com/android/server/app/AppLockManagerService.kt
@@ -19,6 +19,7 @@ package com.android.server.app
 import android.Manifest
 import android.annotation.RequiresPermission
 import android.app.ActivityManager
+import android.app.ActivityManagerInternal
 import android.app.ActivityTaskManager
 import android.app.AlarmManager
 import android.app.AppLockManager
@@ -72,7 +73,9 @@ class AppLockManagerService(private val context: Context) :
     private val alsInternal = LocalService()
     private val serviceScope = CoroutineScope(Dispatchers.Default)
 
-    private var currentUserId = UserHandle.USER_NULL
+    private val currentUserId: Int
+        get() = activityManagerInternal.currentUserId
+
     private var isDeviceSecure = false
 
     private val mutex = Mutex()
@@ -87,25 +90,35 @@ class AppLockManagerService(private val context: Context) :
     private val unlockedPackages = ArraySet<String>()
 
     private val biometricUnlocker = BiometricUnlocker(context)
+
     private val activityTaskManager: IActivityTaskManager by lazy {
         ActivityTaskManager.getService()
     }
+
     private val atmInternal: ActivityTaskManagerInternal by lazy {
         LocalServices.getService(ActivityTaskManagerInternal::class.java)
     }
+
     private val notificationManagerInternal: NotificationManagerInternal by lazy {
         LocalServices.getService(NotificationManagerInternal::class.java)
     }
+
     private val keyguardManager: KeyguardManager by lazy {
         context.getSystemService(KeyguardManager::class.java)
     }
+
     private val alarmManager: AlarmManager by lazy {
         context.getSystemService(AlarmManager::class.java)
     }
+
     private val userManager: UserManager by lazy {
         context.getSystemService(UserManager::class.java)
     }
 
+    private val activityManagerInternal: ActivityManagerInternal by lazy {
+        LocalServices.getService(ActivityManagerInternal::class.java)
+    }
+
     private val alarmsMutex = Mutex()
 
     @GuardedBy("alarmsMutex")
@@ -223,7 +236,7 @@ class AppLockManagerService(private val context: Context) :
                     }
                     unlockedPackages.remove(packageName)
                     notificationManagerInternal.updateSecureNotifications(
-                        packageName, true, ActivityManager.getCurrentUser())
+                        packageName, true, currentUserId)
                 }
                 alarmsMutex.withLock {
                     scheduledAlarms.remove(packageName)
@@ -636,20 +649,18 @@ class AppLockManagerService(private val context: Context) :
 
     private fun onUserStarting(userId: Int) {
         Slog.i(TAG, "onUserStarting: userId = $userId")
-        currentUserId = userId
         isDeviceSecure = keyguardManager.isDeviceSecure(userId)
         logD("isDeviceSecure = $isDeviceSecure")
         serviceScope.launch {
             mutex.withLock {
-                if (!userConfigMap.containsKey(userId)) {
-                    withContext(Dispatchers.IO) {
-                        val config = AppLockConfig(
-                            Environment.getDataSystemDeDirectory(userId))
-                        userConfigMap[userId] = config
-                        config.read()
-                        biometricUnlocker.biometricsAllowed =
-                            config.biometricsAllowed
-                    }
+                if (userConfigMap.containsKey(userId)) return@withLock
+                withContext(Dispatchers.IO) {
+                    val config = AppLockConfig(
+                        Environment.getDataSystemDeDirectory(userId))
+                    userConfigMap[userId] = config
+                    config.read()
+                    biometricUnlocker.biometricsAllowed =
+                        config.biometricsAllowed
                 }
             }
         }
@@ -660,7 +671,7 @@ class AppLockManagerService(private val context: Context) :
         return serviceScope.launch {
             mutex.withLock {
                 unlockedPackages.clear()
-                userConfigMap.remove(userId)?.let {
+                userConfigMap[userId]?.let {
                     withContext(Dispatchers.IO) {
                         it.write()
                     }
-- 
2.32.0 (Apple Git-132)

