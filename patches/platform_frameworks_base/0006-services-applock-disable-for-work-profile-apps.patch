From c95e851b9a26b30303c30f874d96213040b7dc30 Mon Sep 17 00:00:00 2001
From: Alfred Mathew <alfredmathew05@gmail.com>
Date: Tue, 22 Feb 2022 14:19:30 +0530
Subject: [PATCH 06/24] services: applock: disable for work profile apps

* There is no need to have a lock there

Signed-off-by: Alfred Mathew <alfredmathew05@gmail.com>
Signed-off-by: spezi77 <spezi7713@gmx.net>
---
 .../server/app/AppLockManagerService.kt       | 59 +++++++++----------
 .../NotificationManagerService.java           |  2 +-
 .../server/wm/ActivityTaskManagerService.java | 19 +++---
 3 files changed, 37 insertions(+), 43 deletions(-)

diff --git a/services/core/java/com/android/server/app/AppLockManagerService.kt b/services/core/java/com/android/server/app/AppLockManagerService.kt
index b29776475126..86224d8fa9e5 100644
--- a/services/core/java/com/android/server/app/AppLockManagerService.kt
+++ b/services/core/java/com/android/server/app/AppLockManagerService.kt
@@ -313,21 +313,27 @@ class AppLockManagerService(private val context: Context) :
             true /* requireFull */, tag, AppLockManagerService::class.qualifiedName)
     }
 
+    private inline fun <R> clearAndExecute(body: () -> R): R {
+        val ident = Binder.clearCallingIdentity()
+        try {
+            return body()
+        } finally {
+            Binder.restoreCallingIdentity(ident)
+        }
+    }
+
     private fun unlockInternal(
         pkg: String,
         userId: Int,
         onSuccess: () -> Unit,
         onCancel: () -> Unit,
     ) {
-        val ident = Binder.clearCallingIdentity()
-        try {
+        clearAndExecute {
             if (!biometricUnlocker.canUnlock()) {
                 Slog.e(TAG, "Application cannot be unlocked with biometrics or device credentials")
                 return
             }
             biometricUnlocker.unlock(getLabelForPackage(pkg, userId), onSuccess, onCancel)
-        } finally {
-            Binder.restoreCallingIdentity(ident)
         }
     }
 
@@ -639,13 +645,15 @@ class AppLockManagerService(private val context: Context) :
                 logD("Ignoring requireUnlock call for special user $userId")
                 return false
             }
-            val callingUserId = UserHandle.getCallingUserId()
-            val ident = Binder.clearCallingIdentity()
-            try {
-                val isManagedProfile = userManager.getUserInfo(callingUserId).isManagedProfile()
+            if (!isDeviceSecure) {
+                logD("Device is not secure, app does not require unlock")
+                return false
+            }
+            clearAndExecute {
+                val isManagedProfile = userManager.getUserInfo(userId).isManagedProfile()
                 logD("isManagedProfile = $isManagedProfile")
                 if (isManagedProfile) {
-                    logD("User id $callingUserId belongs to a work profile, ignoring requireUnlock")
+                    logD("User id $userId belongs to a work profile, ignoring requireUnlock")
                     return false
                 }
                 // If device is locked then there is no point in proceeding.
@@ -653,12 +661,6 @@ class AppLockManagerService(private val context: Context) :
                     logD("Device is locked, app does not require unlock")
                     return false
                 }
-            } finally {
-                Binder.restoreCallingIdentity(ident)
-            }
-            if (!isDeviceSecure) {
-                logD("Device is not secure, app does not require unlock")
-                return false
             }
             logD("requireUnlock: packageName = $packageName")
             val actualUserId = getActualUserId(userId, "requireUnlock")
@@ -686,22 +688,19 @@ class AppLockManagerService(private val context: Context) :
                 logD("Ignoring unlock call for special user $userId")
                 return
             }
-            val callingUserId = UserHandle.getCallingUserId()
+            if (!isDeviceSecure) {
+                Slog.w(TAG, "Device is not secure, should not be calling unlock()")
+                return
+            }
             val ident = Binder.clearCallingIdentity()
-            try {
-                val isManagedProfile = userManager.getUserInfo(callingUserId).isManagedProfile()
+            clearAndExecute {
+                val isManagedProfile = userManager.getUserInfo(userId).isManagedProfile()
                 logD("isManagedProfile = $isManagedProfile")
                 if (isManagedProfile) {
-                    Slog.w(TAG, "User id $callingUserId belongs to a work profile, should not " +
+                    Slog.w(TAG, "User id $userId belongs to a work profile, should not " +
                         "be calling unlock()")
                     return
                 }
-            } finally {
-                Binder.restoreCallingIdentity(ident)
-            }
-            if (!isDeviceSecure) {
-                Slog.w(TAG, "Device is not secure, should not be calling unlock()")
-                return
             }
             logD("unlock: packageName = $packageName")
             val actualUserId = getActualUserId(userId, "unlock")
@@ -762,18 +761,14 @@ class AppLockManagerService(private val context: Context) :
                 logD("Ignoring isNotificationSecured call for special user $userId")
                 return false
             }
-            val callingUserId = UserHandle.getCallingUserId()
-            val ident = Binder.clearCallingIdentity()
-            try {
-                val isManagedProfile = userManager.getUserInfo(callingUserId).isManagedProfile()
+            clearAndExecute {
+                val isManagedProfile = userManager.getUserInfo(userId).isManagedProfile()
                 logD("isManagedProfile = $isManagedProfile")
                 if (isManagedProfile) {
-                    logD("User id $callingUserId belongs to a work profile, " +
+                    logD("User id $userId belongs to a work profile, " +
                         "ignoring isNotificationSecured")
                     return false
                 }
-            } finally {
-                Binder.restoreCallingIdentity(ident)
             }
             logD("isNotificationSecured: " +
                     "packageName = $packageName, " +
diff --git a/services/core/java/com/android/server/notification/NotificationManagerService.java b/services/core/java/com/android/server/notification/NotificationManagerService.java
index 60d270d22a69..1e07edd2f53d 100755
--- a/services/core/java/com/android/server/notification/NotificationManagerService.java
+++ b/services/core/java/com/android/server/notification/NotificationManagerService.java
@@ -6263,7 +6263,7 @@ public class NotificationManagerService extends SystemService {
         mUsageStats.registerEnqueuedByApp(pkg);
 
         final boolean isContentSecure = mAppLockManagerService != null &&
-            mAppLockManagerService.isNotificationSecured(pkg, incomingUserId);
+            mAppLockManagerService.isNotificationSecured(pkg, userId);
         final StatusBarNotification n = new StatusBarNotification(
                 pkg, opPkg, id, tag, notificationUid, callingPid, notification,
                 user, null, System.currentTimeMillis(), isContentSecure);
diff --git a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
index fa7de27c85af..b9b26d6dfa1c 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
@@ -1205,12 +1205,12 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
 
         final ActivityInfo aInfo = resolveActivityInfoForIntent(intent, resolvedType, userId, callingUid);
         if (aInfo != null) {
-            if (getAppLockManagerService().requireUnlock(aInfo.packageName, mContext.getUserId())) {
+            if (getAppLockManagerService().requireUnlock(aInfo.packageName, userId)) {
                 getAppLockManagerService().unlock(aInfo.packageName, pkg -> {
                     mContext.getMainExecutor().execute(() -> {
                         activityStarter.execute();
                     });
-                }, null /* cancelCallback */, mContext.getUserId());
+                }, null /* cancelCallback */, userId);
                 return ActivityManager.START_ABORTED;
             }
         }
@@ -1741,8 +1741,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
         }
         final String packageName = getTaskPackageName(task);
         if (packageName != null) {
-            final int userId = mContext.getUserId();
-            if (getAppLockManagerService().requireUnlock(packageName, userId)) {
+            if (getAppLockManagerService().requireUnlock(packageName, task.mUserId)) {
                 getAppLockManagerService().unlock(packageName,
                 pkg -> {
                     mContext.getMainExecutor().execute(() -> {
@@ -1753,7 +1752,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
                 pkg -> {
                     // Send user to recents
                     getStatusBarManagerInternal().showRecentApps(false);
-                }, userId);
+                }, task.mUserId);
                 return ActivityManager.START_ABORTED;
             }
         }
@@ -3582,7 +3581,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
         }
         final String packageName = getTaskPackageName(task);
         if (packageName != null && getAppLockManagerService().requireUnlock(
-                packageName, mContext.getUserId())) {
+                packageName, task.mUserId)) {
             return null;
         }
         // Don't call this while holding the lock as this operation might hit the disk.
@@ -5268,14 +5267,14 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
             final ActivityInfo aInfo = resolveActivityInfoForIntent(intents[0], resolvedTypes[0], userId,
                 realCallingUid);
             if (aInfo != null) {
-                if (getAppLockManagerService().requireUnlock(aInfo.packageName, mContext.getUserId())) {
+                if (getAppLockManagerService().requireUnlock(aInfo.packageName, userId)) {
                     getAppLockManagerService().unlock(aInfo.packageName, pkg -> {
                         mContext.getMainExecutor().execute(() ->
                             getActivityStartController().startActivitiesInPackage(uid, realCallingPid,
                                 realCallingUid, callingPackage, callingFeatureId, intents, resolvedTypes,
                                 resultTo, options, userId, validateIncomingUser, originatingPendingIntent,
                                 allowBackgroundActivityStart));
-                    }, null /* cancelCallback */, mContext.getUserId());
+                    }, null /* cancelCallback */, userId);
                     return ActivityManager.START_ABORTED;
                 }
             }
@@ -5296,7 +5295,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
             final ActivityInfo aInfo = resolveActivityInfoForIntent(intent, resolvedType, userId,
                 realCallingUid);
             if (aInfo != null) {
-                if (getAppLockManagerService().requireUnlock(aInfo.packageName, mContext.getUserId())) {
+                if (getAppLockManagerService().requireUnlock(aInfo.packageName, userId)) {
                     getAppLockManagerService().unlock(aInfo.packageName, pkg -> {
                         mContext.getMainExecutor().execute(() ->
                             getActivityStartController().startActivityInPackage(uid, realCallingPid,
@@ -5304,7 +5303,7 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
                                 resultTo, resultWho, requestCode, startFlags, options, userId, inTask,
                                 reason, validateIncomingUser, originatingPendingIntent,
                                 allowBackgroundActivityStart));
-                    }, null /* cancelCallback */, mContext.getUserId());
+                    }, null /* cancelCallback */, userId);
                     return ActivityManager.START_ABORTED;
                 }
             }
-- 
2.32.0 (Apple Git-132)

