From 82362e79fe5a8c61a6623731a49203ccb5f73e73 Mon Sep 17 00:00:00 2001
From: Alfred Mathew <alfredmathew05@gmail.com>
Date: Sun, 20 Feb 2022 14:54:04 +0530
Subject: [PATCH 02/24] services: applock: fix showing unlock prompt for non
 visible packages

Signed-off-by: Alfred Mathew <alfredmathew05@gmail.com>
Signed-off-by: spezi77 <spezi7713@gmx.net>
---
 .../com/android/server/app/AppLockConfig.kt   | 10 +++---
 .../server/app/AppLockManagerService.kt       | 33 ++++++++++++-------
 .../wm/ActivityTaskManagerInternal.java       |  2 ++
 .../server/wm/ActivityTaskManagerService.java |  8 +++++
 4 files changed, 37 insertions(+), 16 deletions(-)

diff --git a/services/core/java/com/android/server/app/AppLockConfig.kt b/services/core/java/com/android/server/app/AppLockConfig.kt
index b46a3eb4f81a..a2762774a189 100644
--- a/services/core/java/com/android/server/app/AppLockConfig.kt
+++ b/services/core/java/com/android/server/app/AppLockConfig.kt
@@ -121,11 +121,11 @@ internal class AppLockConfig(dataDir: File) {
         } catch(e: JSONException) {
             Slog.wtf(AppLockManagerService.TAG, "Failed to parse config file", e)
         }
-        if (AppLockManagerService.DEBUG) {
-            Slog.d(AppLockManagerService.TAG, "readConfig: packages = $appLockPackages")
-            Slog.d(AppLockManagerService.TAG, "readConfig: packageNotificationMap = $packageNotificationMap")
-            Slog.d(AppLockManagerService.TAG, "readConfig: timeout = $appLockTimeout")
-        }
+        AppLockManagerService.logD(
+            "readConfig: packages = $appLockPackages",
+            "readConfig: packageNotificationMap = $packageNotificationMap",
+            "readConfig: timeout = $appLockTimeout",
+        )
     }
 
     private fun reset() {
diff --git a/services/core/java/com/android/server/app/AppLockManagerService.kt b/services/core/java/com/android/server/app/AppLockManagerService.kt
index 08a9e06dda4e..75ad74a6ddcc 100644
--- a/services/core/java/com/android/server/app/AppLockManagerService.kt
+++ b/services/core/java/com/android/server/app/AppLockManagerService.kt
@@ -41,8 +41,8 @@ import android.util.ArraySet
 import android.util.Log
 import android.util.Slog
 
-import com.android.internal.annotations.GuardedBy
 import com.android.internal.R
+import com.android.internal.annotations.GuardedBy
 import com.android.server.app.AppLockManagerServiceInternal.CancelCallback
 import com.android.server.app.AppLockManagerServiceInternal.UnlockCallback
 import com.android.server.LocalServices
@@ -163,13 +163,15 @@ class AppLockManagerService(private val context: Context) :
             logD("onTaskStackChanged")
             serviceScope.launch {
                 val currentTopPackages = ArraySet<String>()
-                atmInternal.getTopVisibleActivities().forEach {
-                    val packageName = atmInternal.getActivityName(
-                        it.activityToken)?.packageName ?: return@forEach
-                    currentTopPackages.add(packageName)
-                }
-                logD("topPackages = $topPackages")
-                logD("currentTopPackages = $currentTopPackages")
+                atmInternal.getTopVisibleActivities().map {
+                    it.activityToken
+                }.filter {
+                    atmInternal.isVisibleActivity(it)
+                }.map {
+                    atmInternal.getActivityName(it)?.packageName
+                }.filterNotNull().toCollection(currentTopPackages)
+                logD("topPackages = $topPackages",
+                    "currentTopPackages = $currentTopPackages")
                 mutex.withLock {
                     topPackages.filter {
                         !currentTopPackages.contains(it) && unlockedPackages.contains(it)
@@ -194,6 +196,11 @@ class AppLockManagerService(private val context: Context) :
                 }
             }
         }
+
+        override fun onActivityUnpinned() {
+            logD("onActivityUnpinned")
+            onTaskStackChanged()
+        }
     }
 
     private val lockAlarmReceiver = object : BroadcastReceiver() {
@@ -811,14 +818,18 @@ class AppLockManagerService(private val context: Context) :
 
     companion object {
         internal const val TAG = "AppLockManagerService"
-        internal val DEBUG: Boolean
+        private val DEBUG: Boolean
             get() = Log.isLoggable(TAG, Log.DEBUG)
 
         private const val ACTION_APP_LOCK_TIMEOUT = "com.android.server.app.AppLockManagerService.APP_LOCK_TIMEOUT"
         private const val EXTRA_PACKAGE = "com.android.server.app.AppLockManagerService.PACKAGE"
 
-        internal fun logD(msg: String) {
-            if (DEBUG) Slog.d(TAG, msg)
+        internal fun logD(vararg msgs: String) {
+            if (DEBUG) {
+                msgs.forEach {
+                    Slog.d(TAG, it)
+                }
+            }
         }
     }
 }
\ No newline at end of file
diff --git a/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java b/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java
index 1759cdeb60d7..9a6aa77de042 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java
@@ -621,4 +621,6 @@ public abstract class ActivityTaskManagerInternal {
      */
     public abstract boolean hasSystemAlertWindowPermission(int callingUid, int callingPid,
             String callingPackage);
+
+    public abstract boolean isVisibleActivity(IBinder activityToken);
 }
diff --git a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
index d26139a8b518..fa7de27c85af 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
@@ -6545,6 +6545,14 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {
             return ActivityTaskManagerService.this.hasSystemAlertWindowPermission(callingUid,
                     callingPid, callingPackage);
         }
+
+        @Override
+        public boolean isVisibleActivity(IBinder activityToken) {
+            synchronized (mGlobalLock) {
+                final ActivityRecord r = ActivityRecord.isInRootTaskLocked(activityToken);
+                return r != null && r.isInterestingToUserLocked();
+            }
+        }
     }
 
     final class PackageConfigurationUpdaterImpl implements
-- 
2.32.0 (Apple Git-132)

