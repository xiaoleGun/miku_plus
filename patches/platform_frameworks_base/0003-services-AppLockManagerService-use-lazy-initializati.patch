From 2d64765d63e647b190f17b3bcdc1e20e80f732a9 Mon Sep 17 00:00:00 2001
From: Alfred Mathew <alfredmathew05@gmail.com>
Date: Sun, 20 Feb 2022 21:18:07 +0530
Subject: [PATCH 03/24] services: AppLockManagerService: use lazy
 initialization instead of lateinit and other optimisations

Signed-off-by: Alfred Mathew <alfredmathew05@gmail.com>
Signed-off-by: spezi77 <spezi7713@gmx.net>
---
 .../server/app/AppLockManagerService.kt       | 91 ++++++++++---------
 1 file changed, 48 insertions(+), 43 deletions(-)

diff --git a/services/core/java/com/android/server/app/AppLockManagerService.kt b/services/core/java/com/android/server/app/AppLockManagerService.kt
index 75ad74a6ddcc..e467266d38d3 100644
--- a/services/core/java/com/android/server/app/AppLockManagerService.kt
+++ b/services/core/java/com/android/server/app/AppLockManagerService.kt
@@ -86,12 +86,22 @@ class AppLockManagerService(private val context: Context) :
     @GuardedBy("mutex")
     private val unlockedPackages = ArraySet<String>()
 
-    private lateinit var biometricUnlocker: BiometricUnlocker
-    private lateinit var activityTaskManager: IActivityTaskManager
-    private lateinit var atmInternal: ActivityTaskManagerInternal
-    private lateinit var notificationManagerInternal: NotificationManagerInternal
-    private lateinit var keyguardManager: KeyguardManager
-    private lateinit var alarmManager: AlarmManager
+    private val biometricUnlocker = BiometricUnlocker(context)
+    private val activityTaskManager: IActivityTaskManager by lazy {
+        ActivityTaskManager.getService()
+    }
+    private val atmInternal: ActivityTaskManagerInternal by lazy {
+        LocalServices.getService(ActivityTaskManagerInternal::class.java)
+    }
+    private val notificationManagerInternal: NotificationManagerInternal by lazy {
+        LocalServices.getService(NotificationManagerInternal::class.java)
+    }
+    private val keyguardManager: KeyguardManager by lazy {
+        context.getSystemService(KeyguardManager::class.java)
+    }
+    private val alarmManager: AlarmManager by lazy {
+        context.getSystemService(AlarmManager::class.java)
+    }
 
     private val alarmsMutex = Mutex()
 
@@ -106,7 +116,9 @@ class AppLockManagerService(private val context: Context) :
     @GuardedBy("alarmsMutex")
     private var usedAlarmRequestCodes = ArraySet<Int>()
 
-    private val whiteListedSystemApps = mutableListOf<String>()
+    private val whiteListedSystemApps: Array<String> by lazy {
+        context.resources.getStringArray(R.array.config_appLockAllowedSystemApps)
+    }
 
     // Sometimes onTaskStackChanged is called multiple times
     // during app switches and [unlockInternal] might be called
@@ -115,7 +127,10 @@ class AppLockManagerService(private val context: Context) :
     @GuardedBy("mutex")
     private var unlockScheduledPackage: String? = null
 
-    private lateinit var packageManager: PackageManager
+    private val packageManager: PackageManager by lazy {
+        context.packageManager
+    }
+
     private val packageChangeReceiver = object : BroadcastReceiver() {
         override fun onReceive(context: Context?, intent: Intent?) {
             if (intent?.action != Intent.ACTION_PACKAGE_REMOVED) return
@@ -242,9 +257,9 @@ class AppLockManagerService(private val context: Context) :
                     logD("Unlock already scheduled for $pkg, skipping")
                     return@launch
                 }
-                logD("$pkg is locked out, asking user to unlock")
                 unlockScheduledPackage = pkg
             }
+            logD("$pkg is locked out, asking user to unlock")
             unlockInternal(pkg, currentUserId,
                 onSuccess = {
                     serviceScope.launch {
@@ -551,18 +566,18 @@ class AppLockManagerService(private val context: Context) :
         enforceCallingPermission("getPackagesWithSecureNotifications")
         val actualUserId = getActualUserId(userId, "getPackagesWithSecureNotifications")
         return runBlocking {
-            mutex.withLock {
-                val config = userConfigMap[actualUserId] ?: run {
+            val pkgNotifMap = mutex.withLock {
+                userConfigMap[actualUserId]?.packageNotificationMap ?: run {
                     Slog.e(TAG, "getPackagesWithSecureNotifications requested by " +
                         "unknown user id $actualUserId")
-                    return@withLock emptyList()
+                    return@runBlocking emptyList()
                 }
-                config.packageNotificationMap.entries.filter {
-                    it.value
-                }.map {
-                    it.key
-                }.toList()
             }
+            pkgNotifMap.entries.filter {
+                it.value
+            }.map {
+                it.key
+            }.toList()
         }
     }
 
@@ -576,10 +591,6 @@ class AppLockManagerService(private val context: Context) :
 
     private fun onBootCompleted() {
         Slog.i(TAG, "onBootCompleted")
-        whiteListedSystemApps.addAll(context.resources
-            .getStringArray(R.array.config_appLockAllowedSystemApps).toList())
-
-        alarmManager = context.getSystemService(AlarmManager::class.java)
         context.registerReceiverAsUser(
             lockAlarmReceiver,
             UserHandle.SYSTEM,
@@ -588,7 +599,6 @@ class AppLockManagerService(private val context: Context) :
             null /* scheduler */,
         )
 
-        packageManager = context.packageManager
         context.registerReceiverForAllUsers(
             packageChangeReceiver,
             IntentFilter(Intent.ACTION_PACKAGE_REMOVED),
@@ -596,14 +606,6 @@ class AppLockManagerService(private val context: Context) :
             null /* scheduler */,
         )
 
-        biometricUnlocker = BiometricUnlocker(context)
-
-        keyguardManager = context.getSystemService(KeyguardManager::class.java)
-
-        notificationManagerInternal = LocalServices.getService(NotificationManagerInternal::class.java)
-
-        activityTaskManager = ActivityTaskManager.getService()
-        atmInternal = LocalServices.getService(ActivityTaskManagerInternal::class.java)
         activityTaskManager.registerTaskStackListener(taskStackListener)
     }
 
@@ -615,10 +617,9 @@ class AppLockManagerService(private val context: Context) :
         serviceScope.launch {
             mutex.withLock {
                 if (!userConfigMap.containsKey(userId)) {
-                    val config = AppLockConfig(Environment.getDataSystemDeDirectory(userId))
-                    userConfigMap[userId] = config
                     withContext(Dispatchers.IO) {
-                        config.read()
+                        userConfigMap[userId] = AppLockConfig(
+                            Environment.getDataSystemDeDirectory(userId)).also { it.read() }
                     }
                 }
             }
@@ -629,11 +630,11 @@ class AppLockManagerService(private val context: Context) :
         Slog.i(TAG, "onUserStopping: userId = $userId")
         return serviceScope.launch {
             mutex.withLock {
-                val config = userConfigMap[userId] ?: return@withLock
-                userConfigMap.remove(userId)
                 unlockedPackages.clear()
-                withContext(Dispatchers.IO) {
-                    config.write()
+                userConfigMap.remove(userId)?.let {
+                    withContext(Dispatchers.IO) {
+                        it.write()
+                    }
                 }
             }
         }
@@ -660,7 +661,7 @@ class AppLockManagerService(private val context: Context) :
             ignoreLockState: Boolean,
         ): Boolean {
             if (userId < 0) {
-                Slog.w(TAG, "Ignoring requireUnlock call for special user $userId")
+                logD("Ignoring requireUnlock call for special user $userId")
                 return false
             }
             if (!isDeviceSecure) {
@@ -698,7 +699,7 @@ class AppLockManagerService(private val context: Context) :
             userId: Int
         ) {
             if (userId < 0) {
-                Slog.w(TAG, "Ignoring unlock call for special user $userId")
+                logD("Ignoring unlock call for special user $userId")
                 return
             }
             if (!isDeviceSecure) {
@@ -720,12 +721,14 @@ class AppLockManagerService(private val context: Context) :
                             "that is not in list")
                         return@withLock
                     }
+                    unlockScheduledPackage = packageName
                     unlockInternal(packageName, actualUserId,
                         onSuccess = {
                             logD("Unlock successfull")
                             serviceScope.launch {
                                 mutex.withLock {
                                     unlockedPackages.add(packageName)
+                                    unlockScheduledPackage = null
                                 }
                                 unlockCallback?.onUnlocked(packageName)
                                 notificationManagerInternal.updateSecureNotifications(
@@ -735,6 +738,9 @@ class AppLockManagerService(private val context: Context) :
                         onCancel = {
                             logD("Unlock cancelled")
                             serviceScope.launch {
+                                mutex.withLock {
+                                    unlockScheduledPackage = null
+                                }
                                 cancelCallback?.onCancelled(packageName)
                             }
                         }
@@ -745,7 +751,7 @@ class AppLockManagerService(private val context: Context) :
 
         override fun reportPasswordChanged(userId: Int) {
             if (userId < 0) {
-                Slog.w(TAG, "Ignoring reportPasswordChanged call for special user $userId")
+                logD("Ignoring reportPasswordChanged call for special user $userId")
                 return
             }
             logD("reportPasswordChanged: userId = $userId")
@@ -762,7 +768,7 @@ class AppLockManagerService(private val context: Context) :
             userId: Int,
         ): Boolean {
             if (userId < 0) {
-                Slog.w(TAG, "Ignoring isNotificationSecured call for special user $userId")
+                logD("Ignoring isNotificationSecured call for special user $userId")
                 return false
             }
             logD("isNotificationSecured: " +
@@ -786,10 +792,9 @@ class AppLockManagerService(private val context: Context) :
     }
 
     class Lifecycle(context: Context): SystemService(context) {
-        private lateinit var service: AppLockManagerService
+        private val service = AppLockManagerService(context)
 
         override fun onStart() {
-            service = AppLockManagerService(context)
             publishBinderService(Context.APP_LOCK_SERVICE, service)
             service.onStart()
         }
-- 
2.32.0 (Apple Git-132)

