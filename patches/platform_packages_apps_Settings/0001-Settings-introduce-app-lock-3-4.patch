From 18a062d9e3352ea0f44273fa77607c564e1c9e8d Mon Sep 17 00:00:00 2001
From: jhonboy121 <alfredmathew05@gmail.com>
Date: Fri, 4 Feb 2022 23:31:45 +0530
Subject: [PATCH 01/11] Settings: introduce app lock [3/4]

Signed-off-by: jhonboy121 <alfredmathew05@gmail.com>
Signed-off-by: Joey Huab <joey@evolution-x.org>
Signed-off-by: dlwlrma123 <alexfinhart@gmail.com>
---
 Android.bp                                    |   8 +-
 AndroidManifest.xml                           |   3 +
 res/values/miku_arrays.xml                    |  21 ++++
 res/values/miku_strings.xml                   |  18 +++
 res/xml/app_lock_settings.xml                 |  48 ++++++++
 res/xml/security_dashboard_settings.xml       |   6 +
 .../settings/security/SecuritySettings.java   |  23 ++++
 .../AppLockNotificationListFragment.kt        |  58 ++++++++++
 ...AppLockNotificationPreferenceController.kt |  78 +++++++++++++
 .../applock/AppLockPackageListFragment.kt     |  58 ++++++++++
 .../applock/AppLockSettingsFragment.kt        |  60 ++++++++++
 .../AppLockSettingsPreferenceController.kt    | 109 ++++++++++++++++++
 .../AppLockTimeoutPreferenceController.kt     |  46 ++++++++
 13 files changed, 534 insertions(+), 2 deletions(-)
 create mode 100644 res/xml/app_lock_settings.xml
 create mode 100644 src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockPackageListFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockSettingsFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt

diff --git a/Android.bp b/Android.bp
index 3a39a11c24..c93c8cb82b 100644
--- a/Android.bp
+++ b/Android.bp
@@ -44,8 +44,11 @@ android_library {
         "SettingsLib-search-defaults",
     ],
 
-    srcs: ["src/**/*.java",
-	   "MikuSettings/src/**/*.java",
+    srcs: [
+        "src/**/*.java",
+	"MikuSettings/src/**/*.java",
+        "src/**/*.kt",
+        "MikuSettings/src/**/*.kt",
     ],
 
     aaptflags: ["--extra-packages com.miku.exsettings"],
@@ -62,6 +65,7 @@ android_library {
         "androidx.core_core",
         "androidx.appcompat_appcompat",
         "androidx.cardview_cardview",
+        "androidx.fragment_fragment-ktx",
         "androidx.preference_preference",
         "androidx.recyclerview_recyclerview",
         "com.google.android.material_material",
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 96cc3c71ed..7cd960aa55 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -109,6 +109,9 @@
     <uses-permission android:name="android.permission.READ_DREAM_SUPPRESSION" />
     <uses-permission android:name="android.permission.MANAGE_APP_HIBERNATION" />
 
+    <!-- App lock -->
+    <uses-permission android:name="android.permission.MANAGE_APP_LOCK" />
+
     <application android:label="@string/settings_label"
             android:icon="@drawable/ic_launcher_settings"
             android:theme="@style/Theme.Settings"
diff --git a/res/values/miku_arrays.xml b/res/values/miku_arrays.xml
index 63a84bd066..83ef7146e9 100644
--- a/res/values/miku_arrays.xml
+++ b/res/values/miku_arrays.xml
@@ -44,4 +44,25 @@
         <item>259200000</item>
     </string-array>
 
+    <!-- App lock timeout -->
+    <string-array name="app_lock_timeout_entries">
+        <item>5 seconds</item>
+        <item>10 seconds</item>
+        <item>30 seconds</item>
+        <item>1 minute</item>
+        <item>5 minutes</item>
+        <item>10 minutes</item>
+        <item>30 minutes</item>
+    </string-array>
+
+    <string-array name="app_lock_timeout_values" translatable="false">
+        <item>5000</item>
+        <item>10000</item>
+        <item>30000</item>
+        <item>60000</item>
+        <item>300000</item>
+        <item>600000</item>
+        <item>1800000</item>
+    </string-array>
+    
 </resources>
\ No newline at end of file
diff --git a/res/values/miku_strings.xml b/res/values/miku_strings.xml
index f2a8a31c77..98d1233ecc 100644
--- a/res/values/miku_strings.xml
+++ b/res/values/miku_strings.xml
@@ -84,4 +84,22 @@
 
     <!-- Title for connected TWS device group [CHAR LIMIT=none]-->
     <string name="connected_tws_device_saved_title">Saved Earbuds</string>
+
+    <!-- App lock -->
+    <string name="app_lock_title">App lock</string>
+    <string name="app_lock_summary_singular">1 application is protected</string>
+    <string name="app_lock_summary_plural"><xliff:g example="2" id="Number of applications">%1$d</xliff:g> applications are protected</string>
+    <string name="app_lock_authentication_dialog_title">Unlock to continue</string>
+    <string name="app_lock_packages_title">Protected apps</string>
+    <string name="app_lock_packages_summary">Select the apps to protect with biometrics or device credentials</string>
+    <string name="app_lock_timeout_title">Auto lock timeout</string>
+    <string name="app_lock_timeout_summary">Duration of time after which an unlocked app in background should be locked</string>
+    <string name="app_lock_notifications_title">Collapse notifications</string>
+    <string name="app_lock_notifications_summary">
+          Notification content will be hidden and collapsed for selected apps when they are locked.
+          Heads up notifications will be automatically disabled.
+    </string>
+    <string name="app_lock_notifications_disabled_summary">Protect an application first</string>
+    <string name="app_lock_footer_text">Bubbles will be automatically dismissed after timeout</string>
+    
 </resources>
diff --git a/res/xml/app_lock_settings.xml b/res/xml/app_lock_settings.xml
new file mode 100644
index 0000000000..30b9000627
--- /dev/null
+++ b/res/xml/app_lock_settings.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2021 AOSP-Krypton Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res-auto"
+    android:title="@string/app_lock_title">
+
+    <Preference
+        android:key="app_lock_packages"
+        android:title="@string/app_lock_packages_title"
+        android:summary="@string/app_lock_packages_summary"
+        android:persistent="false"
+        android:fragment="com.android.settings.security.applock.AppLockPackageListFragment" />
+
+    <ListPreference
+        android:key="app_lock_timeout"
+        android:title="@string/app_lock_timeout_title"
+        android:summary="@string/app_lock_timeout_summary"
+        android:entries="@array/app_lock_timeout_entries"
+        android:entryValues="@array/app_lock_timeout_values"
+        android:defaultValue="0"
+        android:persistent="false"
+        settings:controller="com.android.settings.security.applock.AppLockTimeoutPreferenceController" />
+
+    <Preference
+        android:key="app_lock_notifications"
+        android:title="@string/app_lock_notifications_title"
+        android:persistent="false"
+        android:fragment="com.android.settings.security.applock.AppLockNotificationListFragment"
+        settings:controller="com.android.settings.security.applock.AppLockNotificationPreferenceController" />
+
+    <com.android.settingslib.widget.FooterPreference
+        android:title="@string/app_lock_footer_text"
+        android:selectable="false"
+        settings:searchable="false" />
+</PreferenceScreen>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index bd2da89a88..faeafe1380 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -68,6 +68,12 @@
             android:title="@string/security_settings_biometric_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_biometric_settings" />
+
+        <!-- App lock -->
+        <com.android.settingslib.RestrictedPreference
+            android:key="app_lock"
+            android:title="@string/app_lock_title"
+            settings:controller="com.android.settings.security.applock.AppLockSettingsPreferenceController" />
     </PreferenceCategory>
 
     <PreferenceCategory
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index c8776749ef..7709387ba8 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -21,6 +21,9 @@ import android.app.settings.SettingsEnums;
 import android.content.Context;
 import android.content.Intent;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult;
+
 import com.android.settings.R;
 import com.android.settings.biometrics.combination.CombinedBiometricProfileStatusPreferenceController;
 import com.android.settings.biometrics.combination.CombinedBiometricStatusPreferenceController;
@@ -32,7 +35,9 @@ import com.android.settings.dashboard.DashboardFragment;
 import com.android.settings.enterprise.EnterprisePrivacyPreferenceController;
 import com.android.settings.enterprise.FinancedPrivacyPreferenceController;
 import com.android.settings.overlay.FeatureFactory;
+import com.android.settings.password.ConfirmDeviceCredentialActivity;
 import com.android.settings.search.BaseSearchIndexProvider;
+import com.android.settings.security.applock.AppLockSettingsPreferenceController;
 import com.android.settings.security.trustagent.ManageTrustAgentsPreferenceController;
 import com.android.settings.security.trustagent.TrustAgentListPreferenceController;
 import com.android.settings.widget.PreferenceCategoryController;
@@ -54,6 +59,14 @@ public class SecuritySettings extends DashboardFragment {
     public static final int UNIFY_LOCK_CONFIRM_PROFILE_REQUEST = 129;
     public static final int UNUNIFY_LOCK_CONFIRM_DEVICE_REQUEST = 130;
 
+    private final ActivityResultLauncher<Intent> mSecurityPromptLauncher;
+
+    public SecuritySettings() {
+        mSecurityPromptLauncher = registerForActivityResult(new StartActivityForResult(),
+            resultData -> use(AppLockSettingsPreferenceController.class)
+                .handleActivityResult(resultData));
+    }
+
     @Override
     public int getMetricsCategory() {
         return SettingsEnums.SECURITY;
@@ -95,6 +108,15 @@ public class SecuritySettings extends DashboardFragment {
         super.onActivityResult(requestCode, resultCode, data);
     }
 
+    public void showAppLockSecurityPrompt() {
+        mSecurityPromptLauncher.launch(
+            ConfirmDeviceCredentialActivity.createIntent(
+                getString(R.string.app_lock_authentication_dialog_title),
+                null /* details */
+            )
+        );
+    }
+
     void startUnification() {
         use(LockUnificationPreferenceController.class).startUnification();
     }
@@ -142,6 +164,7 @@ public class SecuritySettings extends DashboardFragment {
         controllers.add(new PreferenceCategoryController(context, WORK_PROFILE_SECURITY_CATEGORY)
                 .setChildren(profileSecurityControllers));
         controllers.addAll(profileSecurityControllers);
+        controllers.add(new AppLockSettingsPreferenceController(context, host, lifecycle));
 
         return controllers;
     }
diff --git a/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt b/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
new file mode 100644
index 0000000000..a604f3b9fc
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.os.Bundle
+import android.view.View
+
+import com.android.settings.R
+
+import com.miku.exsettings.fragments.AppListFragment
+
+class AppLockNotificationListFragment : AppListFragment() {
+
+    private lateinit var appLockManager: AppLockManager
+    private val lockedPackages = mutableListOf<String>()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        appLockManager = requireContext().getSystemService(AppLockManager::class.java)
+        lockedPackages.addAll(appLockManager.getPackages())
+    }
+
+    override protected fun getTitle(): Int = R.string.app_lock_notifications_title
+
+    override protected fun getInitialCheckedList(): List<String> =
+        appLockManager.getPackagesWithSecureNotifications()
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        setDisplayCategory(CATEGORY_BOTH)
+        setCustomFilter {
+            lockedPackages.contains(it.packageName)
+        }
+        super.onViewCreated(view, savedInstanceState)
+    }
+
+    override protected fun onAppSelected(packageName: String) {
+        appLockManager.setSecureNotification(packageName, true)
+    }
+
+    override protected fun onAppDeselected(packageName: String) {
+        appLockManager.setSecureNotification(packageName, false)
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt b/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
new file mode 100644
index 0000000000..583e09c61b
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.content.Context
+import android.os.UserHandle
+
+import androidx.lifecycle.Lifecycle.Event
+import androidx.lifecycle.LifecycleEventObserver
+import androidx.lifecycle.LifecycleOwner
+import androidx.preference.Preference
+import androidx.preference.PreferenceScreen
+
+import com.android.internal.widget.LockPatternUtils
+import com.android.settings.R
+import com.android.settingslib.core.lifecycle.Lifecycle
+
+import com.miku.exsettings.MikuBasePreferenceController
+
+class AppLockNotificationPreferenceController(
+    private val context: Context,
+    lifecycle: Lifecycle?,
+) : MikuBasePreferenceController(context, KEY),
+    LifecycleEventObserver {
+
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+
+    private var preference: Preference? = null
+
+    init {
+        lifecycle?.addObserver(this)
+    }
+
+    override fun getAvailabilityStatus() =
+        if (appLockManager.getPackages().isNotEmpty()) AVAILABLE else DISABLED_DEPENDENT_SETTING
+
+    override fun onStateChanged(owner: LifecycleOwner, event: Event) {
+        if (event == Event.ON_START) {
+            preference?.let {
+                updateState(it)
+            }
+        }
+    }
+
+    override fun displayPreference(screen: PreferenceScreen) {
+        super.displayPreference(screen)
+        preference = screen.findPreference(preferenceKey)
+    }
+
+    override fun updateState(preference: Preference) {
+        if (getAvailabilityStatus() == AVAILABLE) {
+            preference.setEnabled(true)
+            preference.summary = context.getString(R.string.app_lock_notifications_summary)
+        } else {
+            preference.setEnabled(false)
+            preference.summary = context.getString(R.string.app_lock_notifications_disabled_summary)
+        }
+    }
+
+    companion object {
+        private const val KEY = "app_lock_notifications"
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockPackageListFragment.kt b/src/com/android/settings/security/applock/AppLockPackageListFragment.kt
new file mode 100644
index 0000000000..c07df1930c
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockPackageListFragment.kt
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.os.Bundle
+import android.view.View
+
+import com.android.settings.R
+
+import com.miku.exsettings.fragments.AppListFragment
+
+class AppLockPackageListFragment : AppListFragment() {
+
+    private lateinit var appLockManager: AppLockManager
+    private val whiteListedPackages = mutableListOf<String>()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        appLockManager = requireContext().getSystemService(AppLockManager::class.java)
+        whiteListedPackages.addAll(requireContext().resources.getStringArray(
+            com.android.internal.R.array.config_appLockAllowedSystemApps).toList())
+    }
+
+    override protected fun getTitle(): Int = R.string.app_lock_packages_title
+
+    override protected fun getInitialCheckedList(): List<String> = appLockManager.getPackages()
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        setDisplayCategory(CATEGORY_BOTH)
+        setCustomFilter {
+            !it.applicationInfo.isSystemApp() || whiteListedPackages.contains(it.packageName)
+        }
+        super.onViewCreated(view, savedInstanceState)
+    }
+
+    override protected fun onAppSelected(packageName: String) {
+        appLockManager.addPackage(packageName)
+    }
+
+    override protected fun onAppDeselected(packageName: String) {
+        appLockManager.removePackage(packageName)
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockSettingsFragment.kt b/src/com/android/settings/security/applock/AppLockSettingsFragment.kt
new file mode 100644
index 0000000000..b3f47cf944
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockSettingsFragment.kt
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.content.Context
+
+import com.android.settings.R
+import com.android.settings.search.BaseSearchIndexProvider
+import com.android.settingslib.core.AbstractPreferenceController
+import com.android.settingslib.core.lifecycle.Lifecycle
+import com.android.settingslib.search.SearchIndexable
+import com.miku.exsettings.fragments.MikuDashboardFragment
+
+@SearchIndexable
+class AppLockSettingsFragment : MikuDashboardFragment() {
+
+    override protected fun getPreferenceScreenResId() = R.xml.app_lock_settings
+
+    override protected fun getLogTag() = TAG
+
+    override protected fun createPreferenceControllers(context: Context) =
+        buildPreferenceControllers(context, settingsLifecycle)
+
+    companion object {
+        private const val TAG = "AppLockSettingsFragment"
+
+        @JvmField
+        val SEARCH_INDEX_DATA_PROVIDER = object : BaseSearchIndexProvider(
+            R.xml.app_lock_settings
+        ) {
+            override fun createPreferenceControllers(context: Context) =
+                buildPreferenceControllers(context)
+        }
+
+        fun buildPreferenceControllers(
+            context: Context,
+            lifecycle: Lifecycle? = null
+        ): List<AbstractPreferenceController> =
+            listOf(
+                AppLockNotificationPreferenceController(
+                    context,
+                    lifecycle,
+                )
+            )
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
new file mode 100644
index 0000000000..da0a62c491
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.Activity
+import android.app.AppLockManager
+import android.content.Context
+import android.os.UserHandle
+
+import androidx.activity.result.ActivityResult
+import androidx.lifecycle.Lifecycle.Event
+import androidx.lifecycle.LifecycleEventObserver
+import androidx.lifecycle.LifecycleOwner
+import androidx.preference.Preference
+import androidx.preference.PreferenceScreen
+
+import com.android.internal.widget.LockPatternUtils
+import com.android.settings.core.SubSettingLauncher
+import com.android.settings.R
+import com.android.settings.security.SecuritySettings
+import com.android.settingslib.core.lifecycle.Lifecycle
+import com.android.settingslib.transition.SettingsTransitionHelper.TransitionType
+
+import com.miku.exsettings.MikuBasePreferenceController
+
+class AppLockSettingsPreferenceController(
+    private val context: Context,
+    private val host: SecuritySettings?,
+    lifecycle: Lifecycle?,
+) : MikuBasePreferenceController(context, KEY),
+        LifecycleEventObserver {
+
+    private val lockPatternUtils = LockPatternUtils(context)
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+    private var preference: Preference? = null
+
+    init {
+        lifecycle?.addObserver(this)
+    }
+
+    override fun getAvailabilityStatus() =
+        if (lockPatternUtils.isSecure(UserHandle.myUserId())) AVAILABLE else DISABLED_DEPENDENT_SETTING
+
+    override fun onStateChanged(owner: LifecycleOwner, event: Event) {
+        if (event == Event.ON_START) {
+            preference?.let {
+                updateState(it)
+            }
+        }
+    }
+
+    override fun displayPreference(screen: PreferenceScreen) {
+        super.displayPreference(screen)
+        preference = screen.findPreference(preferenceKey)
+    }
+
+    override fun updateState(preference: Preference) {
+        if (getAvailabilityStatus() == AVAILABLE) {
+            preference.setEnabled(true)
+            preference.summary = getSummaryForListSize(appLockManager.getPackages().size)
+        } else {
+            preference.setEnabled(false)
+            preference.summary = context.getString(R.string.disabled_because_no_backup_security)
+        }
+    }
+
+    private fun getSummaryForListSize(size: Int): CharSequence? =
+        when {
+            size == 0 -> null
+            size == 1 -> context.getString(R.string.app_lock_summary_singular)
+            else -> context.getString(R.string.app_lock_summary_plural, size)
+        }
+
+    override fun handlePreferenceTreeClick(preference: Preference): Boolean {
+        if (this.preference == preference && host != null) {
+            host.showAppLockSecurityPrompt()
+            return true
+        }
+        return false
+    }
+
+    fun handleActivityResult(activityResult: ActivityResult?) {
+        if (activityResult?.resultCode == Activity.RESULT_OK && host != null) {
+            SubSettingLauncher(context)
+                .setDestination(AppLockSettingsFragment::class.qualifiedName)
+                .setSourceMetricsCategory(host.metricsCategory)
+                .setTransitionType(TransitionType.TRANSITION_SLIDE)
+                .launch()
+        }
+    }
+
+    companion object {
+        private const val KEY = "app_lock"
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt b/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt
new file mode 100644
index 0000000000..392c3d8ec7
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.content.Context
+
+import androidx.preference.ListPreference
+import androidx.preference.Preference
+
+import com.miku.exsettings.MikuBasePreferenceController
+
+class AppLockTimeoutPreferenceController(
+    context: Context,
+    key: String,
+) : MikuBasePreferenceController(context, key),
+        Preference.OnPreferenceChangeListener {
+
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+
+    override fun getAvailabilityStatus() = AVAILABLE
+
+    override fun updateState(preference: Preference) {
+        val timeout = appLockManager.getTimeout()
+        (preference as ListPreference).value = if (timeout == -1L) null else timeout.toString()
+    }
+
+    override fun onPreferenceChange(preference: Preference, newValue: Any): Boolean {
+        appLockManager.setTimeout((newValue as String).toLong())
+        return true
+    }
+}
-- 
2.32.0 (Apple Git-132)

