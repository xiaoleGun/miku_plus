From 2738ac49b539931731aa9f362f05b2a0cdf88d34 Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhsv09@gmail.com>
Date: Thu, 10 Feb 2022 22:27:30 -0300
Subject: [PATCH 04/11] Initial import of Face Unlock for S

Change-Id: I178b63d73f14742cf890cb05386ad4e82fd8c2be
Signed-off-by: dlwlrma123 <alexfinhart@gmail.com>
---
 Android.bp                                    |   1 +
 AndroidManifest.xml                           |  15 ++
 res/layout/face_enroll_button.xml             |  32 ----
 .../face_enroll_introduction_invisible.xml    | 164 ++++++++++++++++++
 res/layout/face_remove_button.xml             |  32 ----
 res/values/miku_strings.xml                   |   8 +
 res/xml/security_settings_face.xml            |  31 ++--
 .../BiometricEnrollIntroduction.java          |   2 +-
 ...cSettingsKeyguardPreferenceController.java |   4 +-
 .../face/FaceEnrollIntroduction.java          |  76 ++++++++
 ...FaceProfileStatusPreferenceController.java |   5 +
 .../biometrics/face/FaceSettings.java         |  27 ++-
 .../FaceSettingsAppPreferenceController.java  |   6 +
 ...SettingsAttentionPreferenceController.java |   4 +-
 ...ceSettingsConfirmPreferenceController.java |   4 +-
 ...tingsEnrollButtonPreferenceController.java |  19 +-
 ...aceSettingsFooterPreferenceController.java |  14 +-
 ...eSettingsKeyguardPreferenceController.java |   4 +-
 ...sLockscreenBypassPreferenceController.java |  11 +-
 ...tingsRemoveButtonPreferenceController.java |  53 +++---
 .../face/FaceStatusPreferenceController.java  |  12 ++
 ...aceUnlockCategoryPreferenceController.java |   4 +-
 .../settings/custom/biometrics/FaceUtils.java |  31 ++++
 .../biometrics/face/FaceEnrollActivity.java   |  34 ++++
 .../FaceSettingsRedoPreferenceController.java | 138 +++++++++++++++
 .../contextualcards/FaceReEnrollDialog.java   |   7 +-
 26 files changed, 592 insertions(+), 146 deletions(-)
 delete mode 100644 res/layout/face_enroll_button.xml
 create mode 100644 res/layout/face_enroll_introduction_invisible.xml
 delete mode 100644 res/layout/face_remove_button.xml
 create mode 100644 src/com/android/settings/custom/biometrics/FaceUtils.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java

diff --git a/Android.bp b/Android.bp
index c93c8cb82b..0adf91b305 100644
--- a/Android.bp
+++ b/Android.bp
@@ -87,6 +87,7 @@ android_library {
         "android.hardware.dumpstate-V1.1-java",
         "lottie",
         "VendorSettings-preference",
+        "faceunlock_framework",
     ],
 
     libs: [
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 7cd960aa55..8d2cbf9c61 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -112,6 +112,10 @@
     <!-- App lock -->
     <uses-permission android:name="android.permission.MANAGE_APP_LOCK" />
 
+    <!-- Face Unlock -->
+    <uses-permission android:name="com.android.settings.FACE_UNLOCK"/>
+    <permission android:name="com.android.settings.FACE_UNLOCK" android:protectionLevel="signatureOrSystem"/>
+
     <application android:label="@string/settings_label"
             android:icon="@drawable/ic_launcher_settings"
             android:theme="@style/Theme.Settings"
@@ -3869,6 +3873,17 @@
                 android:value="com.miku.exsettings.MikuSettings" />
         </activity>
 
+       <!-- Face unlock -->
+        <activity android:name="com.android.settings.custom.biometrics.face.FaceEnrollActivity"
+            android:permission="com.android.settings.FACE_UNLOCK"
+            android:theme="@style/Transparent"
+            android:exported="true">
+            <intent-filter android:priority="1">
+                <action android:name="com.android.settings.intent.action.FACE_ENROLL"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+            </intent-filter>
+        </activity>
+
         <!-- This is the longest AndroidManifest.xml ever. -->
     </application>
 </manifest>
diff --git a/res/layout/face_enroll_button.xml b/res/layout/face_enroll_button.xml
deleted file mode 100644
index 09094d507d..0000000000
--- a/res/layout/face_enroll_button.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2019 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_enroll_button"
-        style="@style/SudGlifButton.Primary"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:layout_marginStart="20dp"
-        android:text="@string/security_settings_face_settings_enroll"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/layout/face_enroll_introduction_invisible.xml b/res/layout/face_enroll_introduction_invisible.xml
new file mode 100644
index 0000000000..217cacd97c
--- /dev/null
+++ b/res/layout/face_enroll_introduction_invisible.xml
@@ -0,0 +1,164 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2021 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<com.google.android.setupdesign.GlifLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    style="?attr/face_layout_theme"
+    android:id="@+id/setup_wizard_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    app:sudDescriptionText="@string/security_settings_face_enroll_introduction_message"
+    android:visibility="invisible">
+
+    <LinearLayout
+        style="@style/SudContentFrame"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:clipChildren="false"
+        android:clipToPadding="false"
+        android:orientation="vertical"
+        android:layout_marginStart="?attr/sudMarginStart"
+        android:layout_marginEnd="?attr/sudMarginEnd">
+
+        <com.google.android.setupdesign.view.RichTextView
+            android:id="@+id/error_text"
+            style="@style/SudDescription.Glif"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:visibility="gone"/>
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <ImageView
+                style="@style/SudContentIllustration"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:contentDescription="@null"
+                android:src="@drawable/face_enroll_intro_illustration"/>
+
+        </FrameLayout>
+
+        <!-- Contains the extra information text at the bottom -->
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+            <!-- Keep in mind -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle"
+                android:text="@string/security_settings_face_enroll_introduction_info_title" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <ImageView
+                    android:id="@+id/icon_glasses"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_face_enroll_introduction_glasses"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_glasses"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <ImageView
+                    android:id="@+id/icon_looking"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_face_enroll_introduction_visibility"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_looking"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:id="@+id/info_row_require_eyes"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:visibility="gone">
+
+                <ImageView
+                    android:id="@+id/icon_require_eyes"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_settings_24dp"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_require_eyes"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <!-- How it works -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle"
+                android:text="@string/security_settings_face_enroll_introduction_how_title" />
+
+            <TextView
+                android:id="@+id/how_message"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroMessage" />
+
+            <!-- You're in control -->
+            <TextView
+                android:id="@+id/title_in_control"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle" />
+
+            <TextView
+                android:id="@+id/message_in_control"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroMessage"
+                android:paddingBottom="0dp" />
+
+        </LinearLayout>
+
+    </LinearLayout>
+
+</com.google.android.setupdesign.GlifLayout>
\ No newline at end of file
diff --git a/res/layout/face_remove_button.xml b/res/layout/face_remove_button.xml
deleted file mode 100644
index ea860d5caa..0000000000
--- a/res/layout/face_remove_button.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2018 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_remove_button"
-        style="@style/SudGlifButton.Primary"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:layout_marginStart="20dp"
-        android:text="@string/security_settings_face_settings_remove_face_model"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/values/miku_strings.xml b/res/values/miku_strings.xml
index 1e5e424be3..b03e48d990 100644
--- a/res/values/miku_strings.xml
+++ b/res/values/miku_strings.xml
@@ -104,4 +104,12 @@
     <string name="enable_debugging">Enable debugging</string>
     <string name="disable_debugging">Disable debugging</string>
 
+    <!-- Face Unlock -->
+    <string name="security_settings_face_settings_footer_custom">Face unlock lets you unlock your device by looking at it. Keep in mind:\n\n● Your device may unlock any time you look at it.\n● Your device can be unlocked by someone else if they hold it in front of your face while your eyes are open.\n● Your device may also be unlocked by someone who looks a lot like you, such as a child or identical sibling.</string>
+    <string name="security_settings_face_settings_remove_dialog_details_custom">Data recorded by face unlock will be permanently and securely deleted. After removal, you will need your PIN, pattern, or password to unlock your phone.</string>
+    <string name="security_settings_face_unlock_redo_face_scan_summary">Remove existing face scan and create a new scan</string>
+    <string name="security_settings_face_unlock_redo_face_scan_title">Redo face scan</string>
+    <string name="face_redo_confirm_btn">Redo</string>
+    <string name="face_redo_warning_msg">Do you want to remove the existing face scan and create a new one?</string>
+
 </resources>
diff --git a/res/xml/security_settings_face.xml b/res/xml/security_settings_face.xml
index f0d03507aa..d08392c13c 100644
--- a/res/xml/security_settings_face.xml
+++ b/res/xml/security_settings_face.xml
@@ -33,12 +33,6 @@
             android:title="@string/biometric_settings_use_biometric_for_apps"
             settings:keywords="@string/keywords_face_unlock"
             settings:controller="com.android.settings.biometrics.face.FaceSettingsAppPreferenceController"/>
-        <com.android.settingslib.RestrictedSwitchPreference
-            android:key="security_lockscreen_bypass"
-            android:title="@string/lockscreen_bypass_title"
-            android:summary="@string/lockscreen_bypass_summary"
-            settings:keywords="@string/keywords_lockscreen_bypass"
-            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenBypassPreferenceController" />
     </PreferenceCategory>
 
     <PreferenceCategory
@@ -59,24 +53,29 @@
             settings:controller="com.android.settings.biometrics.face.FaceSettingsConfirmPreferenceController"/>
 
         <com.android.settingslib.RestrictedSwitchPreference
-            android:key="biometric_settings_lockscreen_bypass"
+            android:key="security_lockscreen_bypass"
             android:title="@string/lockscreen_bypass_title"
             android:summary="@string/lockscreen_bypass_summary"
             settings:keywords="@string/keywords_lockscreen_bypass"
-            settings:controller="com.android.settings.biometrics.face.BiometricLockscreenBypassPreferenceController" />
+            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenBypassPreferenceController" />
     </PreferenceCategory>
 
-    <com.android.settingslib.widget.LayoutPreference
-        android:key="security_settings_face_delete_faces_container"
+    <Preference
+        android:title="@string/security_settings_face_unlock_redo_face_scan_title"
+        android:key="security_settings_face_redo_face_scan"
+        android:summary="@string/security_settings_face_unlock_redo_face_scan_summary"
+        settings:controller="com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController"
+        settings:keywords="@string/keywords_face_unlock" />
+
+    <Preference
         android:title="@string/security_settings_face_settings_remove_face_model"
-        android:selectable="false"
-        android:layout="@layout/face_remove_button"/>
+        android:key="security_settings_face_delete_faces_container"
+        settings:keywords="@string/keywords_face_unlock"/>
 
-    <com.android.settingslib.widget.LayoutPreference
-        android:key="security_settings_face_enroll_faces_container"
+    <Preference
         android:title="@string/security_settings_face_settings_enroll"
-        android:selectable="false"
-        android:layout="@layout/face_enroll_button"/>
+        android:key="security_settings_face_enroll_faces_container"
+        settings:keywords="@string/keywords_face_unlock"/>
 
     <com.android.settingslib.widget.FooterPreference
         android:key="security_face_footer"
diff --git a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
index 89b43509b7..c162221ffa 100644
--- a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
@@ -58,7 +58,7 @@ public abstract class BiometricEnrollIntroduction extends BiometricEnrollBase
     private static final String KEY_CONFIRMING_CREDENTIALS = "confirming_credentials";
 
     private UserManager mUserManager;
-    private boolean mHasPassword;
+    protected boolean mHasPassword;
     private boolean mBiometricUnlockDisabledByAdmin;
     private TextView mErrorText;
     protected boolean mConfirmingCredentials;
diff --git a/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java b/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
index f6f2d5f2b5..2e07790441 100644
--- a/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
+++ b/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
@@ -26,6 +26,8 @@ import com.android.settings.core.TogglePreferenceController;
 import com.android.settingslib.RestrictedLockUtils;
 import com.android.settingslib.RestrictedLockUtilsInternal;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller that controls whether the biometrics authentication to unlock the device.
  */
@@ -63,7 +65,7 @@ public class BiometricSettingsKeyguardPreferenceController extends TogglePrefere
 
     @Override
     public int getAvailabilityStatus() {
-        if (!Utils.isMultipleBiometricsSupported(mContext)) {
+        if (FaceUtils.isFaceUnlockSupported() || !Utils.isMultipleBiometricsSupported(mContext)) {
             return UNSUPPORTED_ON_DEVICE;
         }
         return getRestrictingAdmin() != null ? DISABLED_FOR_USER : AVAILABLE;
diff --git a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
index ae21177836..cb5e0a20c8 100644
--- a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
@@ -18,6 +18,7 @@ package com.android.settings.biometrics.face;
 
 import android.app.admin.DevicePolicyManager;
 import android.app.settings.SettingsEnums;
+import android.content.ComponentName;
 import android.content.Intent;
 import android.hardware.biometrics.BiometricAuthenticator;
 import android.hardware.face.FaceManager;
@@ -46,6 +47,8 @@ import com.google.android.setupdesign.span.LinkSpan;
 
 import java.util.List;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Provides introductory info about face unlock and prompts the user to agree before starting face
  * enrollment.
@@ -58,6 +61,8 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
     @Nullable private FooterButton mPrimaryFooterButton;
     @Nullable private FooterButton mSecondaryFooterButton;
 
+    private boolean mForRedo;
+
     @Override
     protected void onCancelButtonClick(View view) {
         if (!BiometricUtils.tryStartingNextBiometricEnroll(this, ENROLL_NEXT_BIOMETRIC_REQUEST,
@@ -122,6 +127,7 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
             infoMessageRequireEyes.setText(getInfoMessageRequireEyes());
         }
 
+        mForRedo = getIntent().getBooleanExtra("for_redo", false);
         mFaceManager = Utils.getFaceManagerOrNull(this);
         mFaceFeatureProvider = FeatureFactory.getFactory(getApplicationContext())
                 .getFaceFeatureProvider();
@@ -142,6 +148,9 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
                 });
             }
         }
+        if (FaceUtils.isFaceUnlockSupported() && mHasPassword && mToken != null) {
+            openCustomFaceUnlockPackage();
+        }
     }
 
     protected boolean generateChallengeOnCreate() {
@@ -186,6 +195,9 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
 
     @Override
     protected int getLayoutResource() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return R.layout.face_enroll_introduction_invisible;
+        }
         return R.layout.face_enroll_introduction;
     }
 
@@ -332,4 +344,68 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
     protected int getMoreButtonTextRes() {
         return R.string.security_settings_face_enroll_introduction_more;
     }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (!FaceUtils.isFaceUnlockSupported()) {
+            return;
+        }
+        if (requestCode != CHOOSE_LOCK_GENERIC_REQUEST) {
+            if (requestCode != CONFIRM_REQUEST) {
+                if (requestCode == ENROLL_REQUEST) {
+                    if (resultCode == RESULT_FIRST_USER || resultCode == RESULT_OK) {
+                        setResult(RESULT_FIRST_USER);
+                        finish();
+                        return;
+                    }
+                    setResult(RESULT_CANCELED);
+                    finish();
+                }
+            } else if (resultCode == RESULT_OK && data != null) {
+                checkTokenAndOpenCustomFaceUnlockPackage(data);
+            }
+        } else if (resultCode == RESULT_FIRST_USER) {
+            checkTokenAndOpenCustomFaceUnlockPackage(data);
+        }
+    }
+
+    private void openCustomFaceUnlockPackage() {
+        ComponentName componentName;
+        Intent intent = new Intent();
+        intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN, mToken);
+        if (mUserId != -10000) {
+            intent.putExtra("android.intent.extra.USER_ID", mUserId);
+        }
+        if (mForRedo) {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.FaceEnrollActivity");
+        } else {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.SetupFaceIntroActivity");
+        }
+        intent.setComponent(componentName);
+        if (intent.resolveActivity(getPackageManager()) != null) {
+            startActivityForResult(intent, ENROLL_REQUEST);
+        }
+    }
+
+    private void checkTokenAndOpenCustomFaceUnlockPackage(Intent intent) {
+        if (mToken == null) {
+            mFaceManager.generateChallenge(mUserId, (sensorId, userId, challenge) -> {
+                if (mToken == null) {
+                    mToken = BiometricUtils.requestGatekeeperHat(this, intent, mUserId,
+                            challenge);
+                    mSensorId = sensorId;
+                    mChallenge = challenge;
+                    BiometricUtils.removeGatekeeperPasswordHandle(this, intent);
+                    openCustomFaceUnlockPackage();
+                }
+            });
+        }else{
+            openCustomFaceUnlockPackage();
+        }
+    }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
index 99145f8778..539b06038b 100644
--- a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
@@ -24,6 +24,8 @@ import androidx.preference.Preference;
 
 import com.android.settings.R;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceController {
 
     private static final String KEY_FACE_SETTINGS = "face_settings_profile";
@@ -46,6 +48,9 @@ public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceC
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return UNSUPPORTED_ON_DEVICE;
+        }
         // Check if Face for Profile is available.
         final int isAvailable = super.getAvailabilityStatus();
         if (isAvailable != AVAILABLE) {
diff --git a/src/com/android/settings/biometrics/face/FaceSettings.java b/src/com/android/settings/biometrics/face/FaceSettings.java
index 62347ac8ce..a182c95b80 100644
--- a/src/com/android/settings/biometrics/face/FaceSettings.java
+++ b/src/com/android/settings/biometrics/face/FaceSettings.java
@@ -50,6 +50,9 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+import com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController;
+
 /**
  * Settings screen for face authentication.
  */
@@ -74,6 +77,7 @@ public class FaceSettings extends DashboardFragment {
     private FaceSettingsRemoveButtonPreferenceController mRemoveController;
     private FaceSettingsEnrollButtonPreferenceController mEnrollController;
     private FaceSettingsLockscreenBypassPreferenceController mLockscreenController;
+    private FaceSettingsRedoPreferenceController mRedoController;
     private List<AbstractPreferenceController> mControllers;
 
     private List<Preference> mTogglePreferences;
@@ -84,6 +88,12 @@ public class FaceSettings extends DashboardFragment {
     private boolean mConfirmingPassword;
 
     private final FaceSettingsRemoveButtonPreferenceController.Listener mRemovalListener = () -> {
+        if (FaceUtils.isFaceUnlockSupported()){
+            if (getActivity() != null) {
+                getActivity().finish();
+            }
+            return;
+        }
 
         // Disable the toggles until the user re-enrolls
         for (Preference preference : mTogglePreferences) {
@@ -161,9 +171,7 @@ public class FaceSettings extends DashboardFragment {
                     R.string.security_settings_face_profile_preference_title));
         }
 
-        mLockscreenController = Utils.isMultipleBiometricsSupported(context)
-                ? use(BiometricLockscreenBypassPreferenceController.class)
-                : use(FaceSettingsLockscreenBypassPreferenceController.class);
+        mLockscreenController = use(FaceSettingsLockscreenBypassPreferenceController.class);
         mLockscreenController.setUserId(mUserId);
 
         Preference keyguardPref = findPreference(FaceSettingsKeyguardPreferenceController.KEY);
@@ -188,6 +196,10 @@ public class FaceSettings extends DashboardFragment {
         }
         mRemoveController.setUserId(mUserId);
 
+        if (mRedoController != null) {
+            mRedoController.setUserId(mUserId);
+        }
+
         // Don't show keyguard controller for work profile settings.
         if (mUserManager.isManagedProfile(mUserId)) {
             removePreference(FaceSettingsKeyguardPreferenceController.KEY);
@@ -222,6 +234,7 @@ public class FaceSettings extends DashboardFragment {
         } else {
             mAttentionController.setToken(mToken);
             mEnrollController.setToken(mToken);
+            mRedoController.setToken(mToken);
         }
 
         final boolean hasEnrolled = mFaceManager.hasEnrolledTemplates(mUserId);
@@ -302,6 +315,9 @@ public class FaceSettings extends DashboardFragment {
                 mEnrollController = (FaceSettingsEnrollButtonPreferenceController) controller;
                 mEnrollController.setListener(mEnrollListener);
                 mEnrollController.setActivity((SettingsActivity) getActivity());
+            } else if (controller instanceof FaceSettingsRedoPreferenceController) {
+                mRedoController = (FaceSettingsRedoPreferenceController) controller;
+                mRedoController.setActivity((SettingsActivity) getActivity());
             }
         }
 
@@ -316,6 +332,7 @@ public class FaceSettings extends DashboardFragment {
         controllers.add(new FaceSettingsRemoveButtonPreferenceController(context));
         controllers.add(new FaceSettingsConfirmPreferenceController(context));
         controllers.add(new FaceSettingsEnrollButtonPreferenceController(context));
+        controllers.add(new FaceSettingsRedoPreferenceController(context));
         return controllers;
     }
 
@@ -357,6 +374,10 @@ public class FaceSettings extends DashboardFragment {
                         keys.add(FaceSettingsAttentionPreferenceController.KEY);
                     }
 
+                    if (FaceUtils.isFaceUnlockSupported()) {
+                        keys.add("security_settings_face_unlock_category");
+                    }
+
                     return keys;
                 }
 
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
index c296e56aa0..c838df5805 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
@@ -26,6 +26,8 @@ import androidx.preference.Preference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller for Face settings page controlling the ability to use
  * Face authentication in apps (through BiometricPrompt).
@@ -78,6 +80,10 @@ public class FaceSettingsAppPreferenceController extends FaceSettingsPreferenceC
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()){
+            return UNSUPPORTED_ON_DEVICE;
+        }
+
         // When the device supports multiple biometrics auth, this preference will be hidden.
         if (Utils.isMultipleBiometricsSupported(mContext)) {
             return UNSUPPORTED_ON_DEVICE;
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
index 82fa00b864..5c29e387ac 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
@@ -27,6 +27,8 @@ import androidx.preference.SwitchPreference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller that manages the ability to use face authentication with/without
  * user attention. See {@link FaceManager#setRequireAttention(boolean, byte[])}.
@@ -118,6 +120,6 @@ public class FaceSettingsAttentionPreferenceController extends FaceSettingsPrefe
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
index c515742113..da2594c60f 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
@@ -26,6 +26,8 @@ import androidx.preference.Preference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller giving the user an option to always require confirmation.
  */
@@ -75,6 +77,6 @@ public class FaceSettingsConfirmPreferenceController extends FaceSettingsPrefere
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
index b3e0e1ea88..d7893eead0 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
@@ -20,8 +20,6 @@ import static com.android.settings.Utils.SETTINGS_PACKAGE_NAME;
 
 import android.content.Context;
 import android.content.Intent;
-import android.view.View;
-import android.widget.Button;
 
 import androidx.preference.Preference;
 
@@ -31,14 +29,13 @@ import com.android.settings.core.BasePreferenceController;
 import com.android.settings.password.ChooseLockSettingsHelper;
 import com.android.settingslib.widget.LayoutPreference;
 
-import com.google.android.setupdesign.util.ButtonStyler;
 import com.google.android.setupdesign.util.PartnerStyleHelper;
 
 /**
  * Preference controller that allows a user to enroll their face.
  */
 public class FaceSettingsEnrollButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+        implements Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_enroll_faces_container";
@@ -48,7 +45,6 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     private int mUserId;
     private byte[] mToken;
     private SettingsActivity mActivity;
-    private Button mButton;
     private boolean mIsClicked;
     private Listener mListener;
 
@@ -64,19 +60,11 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
-        mButton = ((LayoutPreference) preference).findViewById(
-                R.id.security_settings_face_settings_enroll_button);
-
-        if (PartnerStyleHelper.shouldApplyPartnerResource(mButton)) {
-            ButtonStyler.applyPartnerCustomizationPrimaryButtonStyle(mContext, mButton);
-        }
-
-        mButton.setOnClickListener(this);
+        preference.setOnPreferenceClickListener(this);
     }
 
     @Override
-    public void onClick(View v) {
+    public boolean onPreferenceClick(Preference preference) {
         mIsClicked = true;
         final Intent intent = new Intent();
         intent.setClassName(SETTINGS_PACKAGE_NAME, FaceEnrollIntroduction.class.getName());
@@ -87,6 +75,7 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
         } else {
             mContext.startActivity(intent);
         }
+        return true;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
index ba1047b0d4..fa144c819a 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
@@ -27,6 +27,8 @@ import com.android.settings.overlay.FeatureFactory;
 import com.android.settings.utils.AnnotationSpan;
 import com.android.settingslib.HelpUtils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Footer for face settings showing the help text and help link.
  */
@@ -55,10 +57,14 @@ public class FaceSettingsFooterPreferenceController extends BasePreferenceContro
         final AnnotationSpan.LinkInfo linkInfo =
                 new AnnotationSpan.LinkInfo(mContext, ANNOTATION_URL, helpIntent);
 
-        final int footerRes = mProvider.isAttentionSupported(mContext)
-                ? R.string.security_settings_face_settings_footer
-                : R.string.security_settings_face_settings_footer_attention_not_supported;
-
+        final int footerRes;
+        if (FaceUtils.isFaceUnlockSupported()) {
+            footerRes = R.string.security_settings_face_settings_footer_custom;
+        } else if (mProvider.isAttentionSupported(mContext)) {
+            footerRes = R.string.security_settings_face_settings_footer;
+        } else {
+            footerRes = R.string.security_settings_face_settings_footer_attention_not_supported;
+        }
         preference.setTitle(AnnotationSpan.linkify(
                 mContext.getText(footerRes), linkInfo));
     }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
index 342d786482..c1b79b184a 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
@@ -28,6 +28,8 @@ import com.android.settings.Utils;
 import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
 import com.android.settingslib.RestrictedSwitchPreference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller for Face settings page controlling the ability to unlock the phone
  * with face.
@@ -71,7 +73,7 @@ public class FaceSettingsKeyguardPreferenceController extends FaceSettingsPrefer
     @Override
     public int getAvailabilityStatus() {
         // When the device supports multiple biometrics auth, this preference will be unavailable.
-        return Utils.isMultipleBiometricsSupported(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+        return Utils.isMultipleBiometricsSupported(mContext) || FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
index c0cb64ec6b..b2457b1c8b 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
@@ -83,16 +83,15 @@ public class FaceSettingsLockscreenBypassPreferenceController
 
     @Override
     public int getAvailabilityStatus() {
-        // When the device supports multiple biometrics auth, this preference won't be shown
-        // in face unlock category.
-        if (Utils.isMultipleBiometricsSupported(mContext)) {
-            return UNSUPPORTED_ON_DEVICE;
-        }
         if (mUserManager.isManagedProfile(getUserId())) {
             return UNSUPPORTED_ON_DEVICE;
         }
 
-        if (mFaceManager != null && mFaceManager.isHardwareDetected()) {
+        boolean faceAuthOnlyOnSecurityView  = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_faceAuthOnlyOnSecurityView);
+
+        if (mFaceManager != null && mFaceManager.isHardwareDetected() &&
+                !faceAuthOnlyOnSecurityView) {
             return mFaceManager.hasEnrolledTemplates(getUserId())
                     ? AVAILABLE : DISABLED_DEPENDENT_SETTING;
         } else {
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
index d8ff4822a4..79521729a2 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
@@ -25,8 +25,6 @@ import android.hardware.face.Face;
 import android.hardware.face.FaceManager;
 import android.os.Bundle;
 import android.util.Log;
-import android.view.View;
-import android.widget.Button;
 import android.widget.Toast;
 
 import androidx.preference.Preference;
@@ -39,17 +37,16 @@ import com.android.settings.overlay.FeatureFactory;
 import com.android.settingslib.core.instrumentation.MetricsFeatureProvider;
 import com.android.settingslib.widget.LayoutPreference;
 
-import com.google.android.setupdesign.util.ButtonStyler;
-import com.google.android.setupdesign.util.PartnerStyleHelper;
-
 import java.util.List;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Controller for the remove button. This assumes that there is only a single face enrolled. The UI
  * will likely change if multiple enrollments are allowed/supported.
  */
-public class FaceSettingsRemoveButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+public class FaceSettingsRemoveButtonPreferenceController extends BasePreferenceController implements
+        Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_delete_faces_container";
@@ -67,8 +64,13 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
         public Dialog onCreateDialog(Bundle savedInstanceState) {
             AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
 
+            int dialogMessage = R.string.security_settings_face_settings_remove_dialog_details;
+            if (FaceUtils.isFaceUnlockSupported()) {
+                dialogMessage = R.string.security_settings_face_settings_remove_dialog_details_custom;
+            }
+
             builder.setTitle(R.string.security_settings_face_settings_remove_dialog_title)
-                    .setMessage(R.string.security_settings_face_settings_remove_dialog_details)
+                    .setMessage(dialogMessage)
                     .setPositiveButton(R.string.delete, mOnClickListener)
                     .setNegativeButton(R.string.cancel, mOnClickListener);
             AlertDialog dialog = builder.create();
@@ -86,7 +88,6 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     private Preference mPreference;
-    private Button mButton;
     private Listener mListener;
     private SettingsActivity mActivity;
     private int mUserId;
@@ -109,7 +110,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
             if (remaining == 0) {
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (!faces.isEmpty()) {
-                    mButton.setEnabled(true);
+                    mPreference.setEnabled(true);
                 } else {
                     mRemoving = false;
                     mListener.onRemoved();
@@ -125,7 +126,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
         @Override
         public void onClick(DialogInterface dialog, int which) {
             if (which == DialogInterface.BUTTON_POSITIVE) {
-                mButton.setEnabled(false);
+                mPreference.setEnabled(false);
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (faces.isEmpty()) {
                     Log.e(TAG, "No faces");
@@ -138,7 +139,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
                 // Remove the first/only face
                 mFaceManager.remove(faces.get(0), mUserId, mRemovalCallback);
             } else {
-                mButton.setEnabled(true);
+                mPreference.setEnabled(true);
                 mRemoving = false;
             }
         }
@@ -162,21 +163,13 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
         mPreference = preference;
-        mButton = ((LayoutPreference) preference)
-                .findViewById(R.id.security_settings_face_settings_remove_button);
-
-        if (PartnerStyleHelper.shouldApplyPartnerResource(mButton)) {
-            ButtonStyler.applyPartnerCustomizationPrimaryButtonStyle(mContext, mButton);
-        }
-
-        mButton.setOnClickListener(this);
+        mPreference.setOnPreferenceClickListener(this);
 
         if (!FaceSettings.isFaceHardwareDetected(mContext)) {
-            mButton.setEnabled(false);
+            mPreference.setEnabled(false);
         } else {
-            mButton.setEnabled(!mRemoving);
+            mPreference.setEnabled(!mRemoving);
         }
     }
 
@@ -191,14 +184,12 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     @Override
-    public void onClick(View v) {
-        if (v == mButton) {
-            mMetricsFeatureProvider.logClickedPreference(mPreference, getMetricsCategory());
-            mRemoving = true;
-            ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
-            dialog.setOnClickListener(mOnClickListener);
-            dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
-        }
+    public boolean onPreferenceClick(Preference preference) {
+        mRemoving = true;
+        ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
+        dialog.setOnClickListener(mOnClickListener);
+        dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
+        return true;
     }
 
     public void setListener(Listener listener) {
diff --git a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
index 319166ecff..04c9fc2a4c 100644
--- a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
@@ -19,6 +19,7 @@ package com.android.settings.biometrics.face;
 import android.content.Context;
 import android.hardware.biometrics.BiometricAuthenticator;
 import android.hardware.face.FaceManager;
+import androidx.preference.Preference;
 
 import androidx.annotation.Nullable;
 import androidx.lifecycle.Lifecycle;
@@ -36,6 +37,8 @@ import com.android.settings.biometrics.ParentalControlsUtils;
 import com.android.settingslib.RestrictedLockUtils;
 import com.android.settingslib.RestrictedPreference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class FaceStatusPreferenceController extends BiometricStatusPreferenceController
         implements LifecycleObserver {
 
@@ -91,6 +94,9 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
     public void updateState(Preference preference) {
         super.updateState(preference);
         updateStateInternal();
+        if (FaceUtils.isFaceUnlockSupported()) {
+            preference.setEnabled(!FaceUtils.isFaceDisabledByAdmin(mContext));
+        }
     }
 
     private void updateStateInternal() {
@@ -107,12 +113,18 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
 
     @Override
     protected String getSummaryTextEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary);
     }
 
     @Override
     protected String getSummaryTextNoneEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary_none);
     }
diff --git a/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java b/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
index d0debdfe59..a7dd0aadf4 100644
--- a/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
@@ -20,6 +20,8 @@ import android.content.Context;
 import com.android.settings.Utils;
 import com.android.settings.core.BasePreferenceController;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller that controls the face unlock features to be shown / be hidden.
  */
@@ -31,6 +33,6 @@ public class FaceUnlockCategoryPreferenceController extends BasePreferenceContro
 
     @Override
     public int getAvailabilityStatus() {
-        return Utils.isMultipleBiometricsSupported(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+        return Utils.isMultipleBiometricsSupported(mContext) || FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/custom/biometrics/FaceUtils.java b/src/com/android/settings/custom/biometrics/FaceUtils.java
new file mode 100644
index 0000000000..b83aec83a9
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/FaceUtils.java
@@ -0,0 +1,31 @@
+package com.android.settings.custom.biometrics;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import com.android.internal.util.custom.faceunlock.FaceUnlockUtils;
+
+public final class FaceUtils {
+    private static final String TAG = "FaceUtils";
+
+    public static boolean isFaceUnlockSupported() {
+        return FaceUnlockUtils.isFaceUnlockSupported();
+    }
+
+    public static boolean isFaceDisabledByAdmin(Context context) {
+        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) context.getSystemService("device_policy");
+        try {
+            if (devicePolicyManager.getPasswordQuality(null) > 32768) {
+                return true;
+            }
+        } catch (SecurityException e) {
+            Log.e(TAG, "isFaceDisabledByAdmin error:", e);
+        }
+        if ((devicePolicyManager.getKeyguardDisabledFeatures(null) & 128) != 0) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
new file mode 100644
index 0000000000..b4ad610724
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
@@ -0,0 +1,34 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import com.android.settings.biometrics.face.FaceEnrollIntroduction;
+import com.android.settings.custom.biometrics.FaceUtils;
+
+public class FaceEnrollActivity extends Activity {
+    private byte[] mToken;
+    @Override
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+        if (FaceUtils.isFaceUnlockSupported()) {
+            if (mToken == null) {
+                mToken = getIntent().getByteArrayExtra("hw_auth_token");
+            }
+            Intent faceIntroIntent = getFaceIntroIntent();
+            faceIntroIntent.putExtra("for_redo", getIntent().getBooleanExtra("for_redo", false));
+            faceIntroIntent.putExtra("hw_auth_token", mToken);
+            if (getCallingActivity() != null) {
+                faceIntroIntent.setFlags(33554432);
+            }
+            startActivity(faceIntroIntent);
+        }
+        finish();
+    }
+
+    private Intent getFaceIntroIntent() {
+        Intent intent = new Intent(this, FaceEnrollIntroduction.class);
+        intent.addFlags(268468224);
+        return intent;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
new file mode 100644
index 0000000000..0d04770e1d
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
@@ -0,0 +1,138 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.face.Face;
+import android.hardware.face.FaceManager;
+import android.util.Log;
+import android.widget.Toast;
+import androidx.preference.Preference;
+import com.android.settings.R;
+import com.android.settings.SettingsActivity;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.slices.SliceBackgroundWorker;
+import com.android.settings.biometrics.face.FaceSettings;
+import com.android.settings.custom.biometrics.FaceUtils;
+import java.util.List;
+
+public class FaceSettingsRedoPreferenceController extends BasePreferenceController implements
+        Preference.OnPreferenceClickListener {
+    static final String KEY = "security_settings_face_redo_face_scan";
+    private static final String TAG = "FaceSettings/Redo";
+    private SettingsActivity mActivity;
+    private final Context mContext;
+    private final FaceManager mFaceManager;
+    private final FaceManager.RemovalCallback mRemovalCallback;
+    private int mUserId;
+    private byte[] mToken;
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY;
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context, String str) {
+        super(context, str);
+        mRemovalCallback = new FaceManager.RemovalCallback() {
+            @Override
+            public void onRemovalError(Face face, int i, CharSequence charSequence) {
+                Log.e(FaceSettingsRedoPreferenceController.TAG, "Unable to remove face: " + face.getBiometricId() + " error: " + i + " " + ((Object) charSequence));
+                Toast.makeText(mContext, charSequence, 0).show();
+            }
+
+            @Override
+            public void onRemovalSucceeded(Face face, int i) {
+                if (i == 0) {
+                    Log.v(FaceSettingsRedoPreferenceController.TAG, "onRemovalSucceeded ");
+                    Intent intent = new Intent("com.android.settings.intent.action.FACE_ENROLL");
+                    intent.putExtra("for_face", true);
+                    intent.putExtra("for_redo", true);
+                    intent.putExtra("hw_auth_token", mToken);
+                    intent.addFlags(268435456);
+                    mContext.startActivity(intent);
+                    return;
+                }
+                Log.v(FaceSettingsRedoPreferenceController.TAG, "Remaining: " + i);
+            }
+        };
+        mContext = context;
+        mFaceManager = (FaceManager) context.getSystemService(FaceManager.class);
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context) {
+        this(context, KEY);
+    }
+
+    public void setUserId(int i) {
+        mUserId = i;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+        if (!FaceSettings.isFaceHardwareDetected(mContext) ||
+              !mFaceManager.hasEnrolledTemplates(mUserId)) {
+            preference.setEnabled(false);
+        } else {
+            preference.setEnabled(true);
+            preference.setOnPreferenceClickListener(this);
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return FaceUtils.isFaceUnlockSupported() ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        showFaceRedoWarningDialog();
+        return true;
+    }
+
+    public void setActivity(SettingsActivity settingsActivity) {
+        mActivity = settingsActivity;
+    }
+
+    private void deleteFace() {
+        List enrolledFaces = mFaceManager.getEnrolledFaces(mUserId);
+        if (enrolledFaces.isEmpty()) {
+            Log.e(TAG, "No faces");
+            return;
+        }
+        if (enrolledFaces.size() > 1) {
+            Log.e(TAG, "Multiple enrollments: " + enrolledFaces.size());
+        }
+        mFaceManager.remove((Face) enrolledFaces.get(0), mUserId, mRemovalCallback);
+    }
+
+    void showFaceRedoWarningDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);
+        builder.setTitle(R.string.security_settings_face_unlock_redo_face_scan_title)
+            .setMessage(R.string.face_redo_warning_msg)
+            .setPositiveButton(R.string.face_redo_confirm_btn, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    deleteFace();
+                }
+            })
+            .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                }
+            })
+            .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                @Override
+                public void onCancel(DialogInterface dialogInterface) {
+                }
+            });
+        builder.create().show();
+    }
+
+    public void setToken(byte[] token) {
+        mToken = token;
+    }
+}
diff --git a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
index e778e8c7ca..6b4116e815 100644
--- a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
+++ b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
@@ -32,6 +32,8 @@ import com.android.settings.R;
 import com.android.settings.Utils;
 import com.android.settings.homepage.contextualcards.slices.FaceSetupSlice;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * This class is used to show a popup dialog for {@link FaceSetupSlice}.
  */
@@ -41,6 +43,7 @@ public class FaceReEnrollDialog extends AlertActivity implements
     private static final String TAG = "FaceReEnrollDialog";
 
     private static final String BIOMETRIC_ENROLL_ACTION = "android.settings.BIOMETRIC_ENROLL";
+    private static final String BIOMETRIC_ENROLL_ACTION_CUSTOM = "com.android.settings.intent.action.FACE_ENROLL";
 
     private FaceManager mFaceManager;
     /**
@@ -110,7 +113,9 @@ public class FaceReEnrollDialog extends AlertActivity implements
                     return;
                 }
                 // Send user to the enroll flow.
-                final Intent reEnroll = new Intent(BIOMETRIC_ENROLL_ACTION);
+                final Intent reEnroll = new Intent(
+                    FaceUtils.isFaceUnlockSupported() ?
+                    BIOMETRIC_ENROLL_ACTION_CUSTOM : BIOMETRIC_ENROLL_ACTION);
                 final Context context = getApplicationContext();
 
                 try {
-- 
2.32.0 (Apple Git-132)

