From 6c546d6ec2a553c74bdc19f616c47b4da98ae491 Mon Sep 17 00:00:00 2001
From: Alfred Mathew <alfredmathew05@gmail.com>
Date: Tue, 22 Feb 2022 18:14:04 +0530
Subject: [PATCH 09/11] Settings: applock: handle biometric prompt activity
 launch from preference controller

* let's keep the fragment clean

Signed-off-by: Alfred Mathew <alfredmathew05@gmail.com>
Signed-off-by: dlwlrma123 <alexfinhart@gmail.com>
---
 res/values/miku_strings.xml                   |  2 +-
 .../settings/security/SecuritySettings.java   | 21 --------
 .../AppLockSettingsPreferenceController.kt    | 52 ++++++++++++-------
 3 files changed, 33 insertions(+), 42 deletions(-)

diff --git a/res/values/miku_strings.xml b/res/values/miku_strings.xml
index bce82aed82..a23ad8235d 100644
--- a/res/values/miku_strings.xml
+++ b/res/values/miku_strings.xml
@@ -89,7 +89,7 @@
     <string name="app_lock_title">App lock</string>
     <string name="app_lock_summary_singular">1 application is protected</string>
     <string name="app_lock_summary_plural"><xliff:g example="2" id="Number of applications">%1$d</xliff:g> applications are protected</string>
-    <string name="app_lock_authentication_dialog_title">Unlock to continue</string>
+    <string name="app_lock_authentication_dialog_title">Unlock</string>
     <string name="app_lock_packages_title">Protected apps</string>
     <string name="app_lock_packages_summary">Select the apps to protect with biometrics or device credentials</string>
     <string name="app_lock_timeout_title">Auto lock timeout</string>
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index 7709387ba8..49fde330d1 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -21,9 +21,6 @@ import android.app.settings.SettingsEnums;
 import android.content.Context;
 import android.content.Intent;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult;
-
 import com.android.settings.R;
 import com.android.settings.biometrics.combination.CombinedBiometricProfileStatusPreferenceController;
 import com.android.settings.biometrics.combination.CombinedBiometricStatusPreferenceController;
@@ -35,7 +32,6 @@ import com.android.settings.dashboard.DashboardFragment;
 import com.android.settings.enterprise.EnterprisePrivacyPreferenceController;
 import com.android.settings.enterprise.FinancedPrivacyPreferenceController;
 import com.android.settings.overlay.FeatureFactory;
-import com.android.settings.password.ConfirmDeviceCredentialActivity;
 import com.android.settings.search.BaseSearchIndexProvider;
 import com.android.settings.security.applock.AppLockSettingsPreferenceController;
 import com.android.settings.security.trustagent.ManageTrustAgentsPreferenceController;
@@ -59,14 +55,6 @@ public class SecuritySettings extends DashboardFragment {
     public static final int UNIFY_LOCK_CONFIRM_PROFILE_REQUEST = 129;
     public static final int UNUNIFY_LOCK_CONFIRM_DEVICE_REQUEST = 130;
 
-    private final ActivityResultLauncher<Intent> mSecurityPromptLauncher;
-
-    public SecuritySettings() {
-        mSecurityPromptLauncher = registerForActivityResult(new StartActivityForResult(),
-            resultData -> use(AppLockSettingsPreferenceController.class)
-                .handleActivityResult(resultData));
-    }
-
     @Override
     public int getMetricsCategory() {
         return SettingsEnums.SECURITY;
@@ -108,15 +96,6 @@ public class SecuritySettings extends DashboardFragment {
         super.onActivityResult(requestCode, resultCode, data);
     }
 
-    public void showAppLockSecurityPrompt() {
-        mSecurityPromptLauncher.launch(
-            ConfirmDeviceCredentialActivity.createIntent(
-                getString(R.string.app_lock_authentication_dialog_title),
-                null /* details */
-            )
-        );
-    }
-
     void startUnification() {
         use(LockUnificationPreferenceController.class).startUnification();
     }
diff --git a/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
index 639aa3dca8..e9c2bbad97 100644
--- a/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
+++ b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
@@ -22,7 +22,8 @@ import android.content.Context
 import android.content.Intent
 import android.os.UserHandle
 
-import androidx.activity.result.ActivityResult
+import androidx.activity.result.ActivityResultLauncher
+import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
 import androidx.lifecycle.Lifecycle.Event
 import androidx.lifecycle.LifecycleEventObserver
 import androidx.lifecycle.LifecycleOwner
@@ -30,8 +31,9 @@ import androidx.preference.Preference
 import androidx.preference.PreferenceScreen
 
 import com.android.internal.widget.LockPatternUtils
-import com.android.settings.core.SubSettingLauncher
 import com.android.settings.R
+import com.android.settings.core.SubSettingLauncher
+import com.android.settings.password.ConfirmDeviceCredentialActivity
 import com.android.settings.security.SecuritySettings
 import com.android.settingslib.core.lifecycle.Lifecycle
 import com.android.settingslib.transition.SettingsTransitionHelper.TransitionType
@@ -39,7 +41,7 @@ import com.android.settingslib.transition.SettingsTransitionHelper.TransitionTyp
 import com.miku.exsettings.MikuBasePreferenceController
 
 class AppLockSettingsPreferenceController(
-    private val context: Context,
+    context: Context,
     private val host: SecuritySettings?,
     lifecycle: Lifecycle?,
 ) : MikuBasePreferenceController(context, KEY),
@@ -48,13 +50,29 @@ class AppLockSettingsPreferenceController(
     private val lockPatternUtils = LockPatternUtils(context)
     private val appLockManager = context.getSystemService(AppLockManager::class.java)
     private var preference: Preference? = null
+    private val securityPromptLauncher: ActivityResultLauncher<Intent>?
 
     init {
         lifecycle?.addObserver(this)
+        securityPromptLauncher = host?.registerForActivityResult(
+            StartActivityForResult()
+        ) {
+            if (it?.resultCode == Activity.RESULT_OK) {
+                SubSettingLauncher(mContext)
+                    .setDestination(AppLockSettingsFragment::class.qualifiedName)
+                    .setSourceMetricsCategory(host.metricsCategory)
+                    .setTransitionType(TransitionType.TRANSITION_SLIDE)
+                    .addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
+                    .launch()
+            }
+        }
     }
 
     override fun getAvailabilityStatus() =
-        if (lockPatternUtils.isSecure(UserHandle.myUserId())) AVAILABLE else DISABLED_DEPENDENT_SETTING
+        if (lockPatternUtils.isSecure(UserHandle.myUserId()))
+            AVAILABLE
+        else
+            DISABLED_DEPENDENT_SETTING
 
     override fun onStateChanged(owner: LifecycleOwner, event: Event) {
         if (event == Event.ON_START) {
@@ -75,36 +93,30 @@ class AppLockSettingsPreferenceController(
             preference.summary = getSummaryForListSize(appLockManager.getPackages().size)
         } else {
             preference.setEnabled(false)
-            preference.summary = context.getString(R.string.disabled_because_no_backup_security)
+            preference.summary = mContext.getString(R.string.disabled_because_no_backup_security)
         }
     }
 
     private fun getSummaryForListSize(size: Int): CharSequence? =
         when {
             size == 0 -> null
-            size == 1 -> context.getString(R.string.app_lock_summary_singular)
-            else -> context.getString(R.string.app_lock_summary_plural, size)
+            size == 1 -> mContext.getString(R.string.app_lock_summary_singular)
+            else -> mContext.getString(R.string.app_lock_summary_plural, size)
         }
 
     override fun handlePreferenceTreeClick(preference: Preference): Boolean {
-        if (this.preference == preference && host != null) {
-            host.showAppLockSecurityPrompt()
+        if (preference.key == KEY && securityPromptLauncher != null) {
+            securityPromptLauncher.launch(
+                ConfirmDeviceCredentialActivity.createIntent(
+                    mContext.getString(R.string.app_lock_authentication_dialog_title),
+                    null /* details */,
+                )
+            )
             return true
         }
         return false
     }
 
-    fun handleActivityResult(activityResult: ActivityResult?) {
-        if (activityResult?.resultCode == Activity.RESULT_OK && host != null) {
-            SubSettingLauncher(context)
-                .setDestination(AppLockSettingsFragment::class.qualifiedName)
-                .setSourceMetricsCategory(host.metricsCategory)
-                .setTransitionType(TransitionType.TRANSITION_SLIDE)
-                .addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
-                .launch()
-        }
-    }
-
     companion object {
         private const val KEY = "app_lock"
     }
-- 
2.32.0 (Apple Git-132)

